/** @jsxImportSource theme-ui */
import Head from "next/head"

import { Button, Flex, Heading, Text } from "@theme-ui/components"

import Header from "@/components/Header/Header"
import { useWallet } from "@solana/wallet-adapter-react"
import { useRafflesStore } from "@/hooks/useRafflesStore"
import { useEffect, useMemo, useState } from "react"
import { Raffle } from "lib/types"
import Link from "next/link"
import { getDisplayAmount } from "lib/accounts"
import Countdown from "react-countdown"
import { ClockIcon, TicketIcon } from "@/components/icons"
import { PurchaseTickets } from "@/components/PurchaseTicket"

export default function Home() {
  const { publicKey } = useWallet()
  const { raffles, fetchAllRaffles, fetching, updateRaffleById } =
    useRafflesStore()
  const [showOwnRafflesOnly, setShowOwnRafflesOnly] = useState(false)
  const [hideEndedRaffles, setHideEndedRaffles] = useState(false)

  useEffect(() => {
    fetchAllRaffles()
  }, [fetchAllRaffles])

  const filterMap = useMemo(
    () => ({
      own: (raffle: Raffle) => raffle.entrants.has(publicKey?.toString() || ""),
      ongoing: (raffle: Raffle) => new Date() < raffle.endTimestamp,
    }),
    [publicKey]
  )

  const rafflesToShow = useMemo(() => {
    // @ts-ignore
    let toShow: Raffle[] = [...raffles.values()].sort(
      (raffle1, raffle2) =>
        raffle2.endTimestamp.getTime() - raffle1.endTimestamp.getTime()
    )
    if (showOwnRafflesOnly) toShow = toShow.filter(filterMap.own)
    if (hideEndedRaffles) toShow = toShow.filter(filterMap.ongoing)
    return toShow
  }, [raffles, filterMap, showOwnRafflesOnly, hideEndedRaffles])

  console.log(rafflesToShow)
  return (
    <>
      <Head>
        <title>Raffles</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginTop: "4rem",
        }}
      >
        <Heading mb=".8rem" variant="heading1">
          Raffles
        </Heading>
        <Text>Our raffles</Text>

        <Flex
          sx={{
            display: "grid",
            gridTemplateColumns: "1fr",
            gap: "1.6rem",
            marginTop: "3.2rem",

            "@media (min-width: 768px)": {
              gridTemplateColumns:
                rafflesToShow?.length < 3
                  ? `repeat(${rafflesToShow.length}, 1fr)`
                  : "1fr 1fr 1fr",
            },
          }}
        >
          {rafflesToShow &&
            rafflesToShow.map((raffle) => {
              if (raffle.prizes.length === 0) return null

              const prize = raffle.prizes[0]
              const imageUrl = prize.meta.imageUri

              const MAX_TITLE_LENGTH = 20

              const ended = new Date() > raffle.endTimestamp

              return (
                <>
                  <Link href={raffle.publicKey.toString()}>
                    <a
                      sx={{
                        transform: "scale(1)",
                        backgroundColor: "background",
                        ":hover": {
                          transform: "scale(1.01)",
                        },
                      }}
                      title="Raffle"
                    >
                      <Flex
                        sx={{
                          flexDirection: "column",
                          border: "1px solid",
                          borderColor: "primary",
                          borderRadius: ".4rem",
                          padding: "1.6rem",
                          alignItems: "center",
                          gap: "1.6rem",
                        }}
                      >
                        <span>
                          {raffle.prizes.length} prize
                          {raffle.prizes.length > 1 && "s"}
                        </span>
                        {new Date() > raffle.endTimestamp && <span>Ended</span>}
                        <img
                          sx={{
                            maxWidth: "33%",
                          }}
                          src={imageUrl}
                        />
                        <Heading variant="heading3">
                          {raffle.metadata.name.length > MAX_TITLE_LENGTH ? (
                            <>
                              {raffle.metadata.name.slice(
                                0,
                                MAX_TITLE_LENGTH - 4
                              )}{" "}
                              ...
                            </>
                          ) : (
                            raffle.publicKey.toString().slice(0, 9)
                          )}
                          ...
                        </Heading>
                        <hr />
                        <Flex
                          sx={{
                            gap: "3.2rem",
                          }}
                        >
                          <Text
                            sx={{
                              display: "flex",
                              gap: ".8rem",
                              alignItems: "center",
                            }}
                          >
                            <TicketIcon />
                            {raffle.totalTickets} sold
                          </Text>
                          <Text
                            sx={{
                              display: "flex",
                              gap: ".8rem",
                              alignItems: "center",
                            }}
                          >
                            <ClockIcon />

                            <Countdown date={raffle.endTimestamp} />
                          </Text>
                        </Flex>
                        <Flex
                          sx={{
                            gap: ".8rem",
                          }}
                        >
                          <span>Ticket price</span>
                          {getDisplayAmount(
                            raffle.proceeds.ticketPrice,
                            raffle.proceeds.mint
                          )}{" "}
                          {raffle.proceeds.mint.symbol}
                        </Flex>
                      </Flex>
                    </a>
                  </Link>
                  {!ended && (
                    <PurchaseTickets
                      raffle={raffle}
                      updateRaffle={() =>
                        updateRaffleById(raffle.publicKey.toString())
                      }
                    />
                  )}
                </>
              )
            })}
        </Flex>
      </main>

      <footer
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          margin: "4rem 0",
        }}
      >
        Powered by
        <a
          href="https://twitter.com/mentaworks"
          target="_blank"
          rel="noopener noreferrer"
          sx={{
            display: "flex",
            alignItems: "center",
            marginLeft: "0.2em",
          }}
        >
          <Text
            variant="small"
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            menta.works
          </Text>
        </a>
      </footer>
    </>
  )
}
