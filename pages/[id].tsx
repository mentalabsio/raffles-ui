/** @jsxImportSource theme-ui */
import Head from "next/head"

import { Button, Flex, Heading, Text } from "@theme-ui/components"

import Header from "@/components/Header/Header"
import { useWallet } from "@solana/wallet-adapter-react"
import { useRafflesStore } from "@/hooks/useRafflesStore"
import { useCallback, useEffect, useMemo, useState } from "react"
import { Raffle } from "lib/types"
import Link from "next/link"
import { getDisplayAmount } from "lib/accounts"
import Countdown from "react-countdown"
import { ClockIcon, CoinIcon, TicketIcon } from "@/components/icons"
import { PurchaseTickets } from "@/components/PurchaseTicket"
import { useRouter } from "next/router"
import { LoadingIcon } from "@/components/icons/LoadingIcon"
import { useProgramApis } from "@/hooks/useProgramApis"
import { expand } from "lib/randomnessTools"
import ClaimButton from "@/components/ClaimButton"
import { claimPrize } from "lib/actions/claimPrize"
import { sleep } from "lib/utils"

export default function Home() {
  const { publicKey } = useWallet()
  const { raffles, fetchAllRaffles, fetching, updateRaffleById } =
    useRafflesStore()
  const { draffleClient } = useProgramApis()

  const { query } = useRouter()

  useEffect(() => {
    fetchAllRaffles()
  }, [fetchAllRaffles])

  const currentRaffle = useMemo(
    () => raffles && raffles.get(query.id.toString()),
    [raffles, query]
  )

  const prize = currentRaffle?.prizes[0]
  const imageUrl = prize?.meta.imageUri

  const MAX_TITLE_LENGTH = 20

  const ended = new Date() > currentRaffle?.endTimestamp

  console.log(currentRaffle)

  /** CLAIM */
  const entrant = useMemo(() => {
    if (!draffleClient.provider.wallet.publicKey) return

    return currentRaffle?.entrants.get(
      draffleClient.provider.wallet.publicKey.toString()
    )
  }, [currentRaffle, draffleClient.provider.wallet.publicKey]) // "Unnecessary" dependency required due to React not picking up change in publicKey subfield

  // Each winning ticket index for each prize
  const winningTickets = useMemo(() => {
    if (
      !currentRaffle?.randomness ||
      !currentRaffle?.entrants ||
      currentRaffle?.entrants.size === 0
    )
      return []
    const secret = currentRaffle?.randomness
    return currentRaffle?.prizes.map((_, prizeIndex) => {
      const rand = expand(secret, prizeIndex)
      return rand % currentRaffle?.totalTickets
    })
  }, [currentRaffle])

  const entrantWinningTickets = useMemo(() => {
    if (!entrant || !winningTickets) return []
    return winningTickets.reduce<{ prizeIndex: number; ticketIndex: number }[]>(
      (acc, ticketIndex, prizeIndex) => {
        if (entrant?.tickets.includes(ticketIndex)) {
          return [...acc, { prizeIndex, ticketIndex }]
        } else {
          return acc
        }
      },
      []
    )
  }, [entrant, winningTickets])

  const onClaimPrize = useCallback(
    async (prizeIndex: number, ticketIndex: number) => {
      try {
        await claimPrize(draffleClient, currentRaffle, prizeIndex, ticketIndex)
        await sleep(500)
        updateRaffleById(currentRaffle.publicKey.toString())
        // toast.success('Prize claimed, check your wallet!');
      } catch (error: any) {
        if (error.msg) {
          // toast.error(`Transaction failed: ${error.msg}`);
        } else {
          // toast.error('Unexpected error');
        }
      }
    },
    [draffleClient, currentRaffle, updateRaffleById]
  )

  const winnersRevealed = useMemo(
    () => !!currentRaffle?.randomness,
    [currentRaffle]
  )

  return (
    <>
      <Head>
        <title>Raffles</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginTop: "4rem",
        }}
      >
        <Heading mb=".8rem" variant="heading1">
          {query.id}
        </Heading>

        <Flex
          sx={{
            gap: "1.6rem",
            marginTop: "3.2rem",
            flexDirection: "column",
          }}
        >
          {currentRaffle ? (
            <>
              <Flex
                sx={{
                  flexDirection: "column",
                  border: "1px solid",
                  borderColor: "primary",
                  borderRadius: ".4rem",
                  padding: "1.6rem",
                  alignItems: "center",
                  gap: "1.6rem",
                }}
              >
                <Heading variant="heading3">
                  {currentRaffle.metadata.name.length > MAX_TITLE_LENGTH ? (
                    <>
                      {currentRaffle.metadata.name.slice(
                        0,
                        MAX_TITLE_LENGTH - 4
                      )}{" "}
                      ...
                    </>
                  ) : (
                    currentRaffle.publicKey.toString().slice(0, 9)
                  )}
                  ...
                </Heading>

                <span>
                  {currentRaffle.prizes.length} prize
                  {currentRaffle.prizes.length > 1 && "s"}
                </span>

                <img
                  sx={{
                    maxWidth: "8rem",
                  }}
                  src={imageUrl}
                />

                <Text
                  sx={{
                    display: "flex",
                    gap: ".8rem",
                    alignItems: "center",
                  }}
                >
                  <ClockIcon />

                  {!ended ? (
                    <Countdown date={currentRaffle.endTimestamp} />
                  ) : (
                    "Ended"
                  )}
                </Text>
                <Flex
                  sx={{
                    gap: "3.2rem",
                  }}
                >
                  <Text
                    sx={{
                      display: "flex",
                      gap: ".8rem",
                      alignItems: "center",
                    }}
                  >
                    <TicketIcon />
                    {currentRaffle.totalTickets} sold
                  </Text>

                  <Flex
                    sx={{
                      gap: ".8rem",
                      alignItems: "center",
                    }}
                  >
                    <CoinIcon />
                    {getDisplayAmount(
                      currentRaffle.proceeds.ticketPrice,
                      currentRaffle.proceeds.mint
                    )}{" "}
                    ${currentRaffle.proceeds.mint.symbol} ea
                  </Flex>
                </Flex>
                {winnersRevealed ? (
                  <Text>Winners have been announced!</Text>
                ) : (
                  <Text>Winners have NOT been announced yet!</Text>
                )}
              </Flex>
              {!ended && (
                <PurchaseTickets
                  raffle={currentRaffle}
                  updateRaffle={() =>
                    updateRaffleById(currentRaffle.publicKey.toString())
                  }
                />
              )}
              {/** CLAIM */}
              {currentRaffle.prizes.map((prize, prizeIndex) => {
                const ticketIndex = winningTickets[prizeIndex]
                const isWon = entrantWinningTickets.some(
                  (entrantWinningTicket) =>
                    entrantWinningTicket.ticketIndex === ticketIndex
                )

                return (
                  <>
                    {isWon && (
                      <div>
                        <ClaimButton
                          claimPrize={onClaimPrize}
                          prize={prize}
                          prizeIndex={prizeIndex}
                          ticketIndex={ticketIndex}
                        />
                      </div>
                    )}
                  </>
                )
              })}
            </>
          ) : (
            <LoadingIcon />
          )}
        </Flex>
      </main>

      <footer
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          margin: "4rem 0",
        }}
      >
        Powered by
        <a
          href="https://twitter.com/mentaworks"
          target="_blank"
          rel="noopener noreferrer"
          sx={{
            display: "flex",
            alignItems: "center",
            marginLeft: "0.2em",
          }}
        >
          <Text
            variant="small"
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            menta.works
          </Text>
        </a>
      </footer>
    </>
  )
}
