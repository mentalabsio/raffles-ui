/** @jsxImportSource theme-ui */
import Head from "next/head"

import { Button, Flex, Heading, Text } from "@theme-ui/components"

import Header from "@/components/Header/Header"
import { useWallet } from "@solana/wallet-adapter-react"
import { useRafflesStore } from "@/hooks/useRafflesStore"
import { useEffect, useMemo, useState } from "react"
import { Raffle } from "lib/types"
import Link from "next/link"
import { getDisplayAmount } from "lib/accounts"
import Countdown from "react-countdown"
import { ClockIcon, CoinIcon, TicketIcon } from "@/components/icons"
import { PurchaseTickets } from "@/components/PurchaseTicket"
import { useRouter } from "next/router"
import { LoadingIcon } from "@/components/icons/LoadingIcon"

export default function Home() {
  const { publicKey } = useWallet()
  const { raffles, fetchAllRaffles, fetching, updateRaffleById } =
    useRafflesStore()

  const { query } = useRouter()

  useEffect(() => {
    fetchAllRaffles()
  }, [fetchAllRaffles])

  const currentRaffle = useMemo(
    () => raffles && raffles.get(query.id.toString()),
    [raffles, query]
  )

  const prize = currentRaffle?.prizes[0]
  const imageUrl = prize?.meta.imageUri

  const MAX_TITLE_LENGTH = 20

  const ended = new Date() > currentRaffle?.endTimestamp

  console.log(currentRaffle)
  return (
    <>
      <Head>
        <title>Raffles</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginTop: "4rem",
        }}
      >
        <Heading mb=".8rem" variant="heading1">
          {query.id}
        </Heading>

        <Flex
          sx={{
            gap: "1.6rem",
            marginTop: "3.2rem",
            flexDirection: "column",
          }}
        >
          {currentRaffle ? (
            <>
              <Link href={currentRaffle.publicKey.toString()}>
                <a
                  sx={{
                    transform: "scale(1)",
                    backgroundColor: "background",
                    ":hover": {
                      transform: "scale(1.01)",
                    },
                  }}
                  title="Raffle"
                >
                  <Flex
                    sx={{
                      flexDirection: "column",
                      border: "1px solid",
                      borderColor: "primary",
                      borderRadius: ".4rem",
                      padding: "1.6rem",
                      alignItems: "center",
                      gap: "1.6rem",
                    }}
                  >
                    <span>
                      {currentRaffle.prizes.length} prize
                      {currentRaffle.prizes.length > 1 && "s"}
                    </span>
                    {new Date() > currentRaffle.endTimestamp && (
                      <span>Ended</span>
                    )}
                    <img
                      sx={{
                        maxWidth: "8rem",
                      }}
                      src={imageUrl}
                    />
                    <Heading variant="heading3">
                      {currentRaffle.metadata.name.length > MAX_TITLE_LENGTH ? (
                        <>
                          {currentRaffle.metadata.name.slice(
                            0,
                            MAX_TITLE_LENGTH - 4
                          )}{" "}
                          ...
                        </>
                      ) : (
                        currentRaffle.publicKey.toString().slice(0, 9)
                      )}
                      ...
                    </Heading>
                    <Text
                      sx={{
                        display: "flex",
                        gap: ".8rem",
                        alignItems: "center",
                      }}
                    >
                      <ClockIcon />

                      <Countdown date={currentRaffle.endTimestamp} />
                    </Text>
                    <Flex
                      sx={{
                        gap: "3.2rem",
                      }}
                    >
                      <Text
                        sx={{
                          display: "flex",
                          gap: ".8rem",
                          alignItems: "center",
                        }}
                      >
                        <TicketIcon />
                        {currentRaffle.totalTickets} sold
                      </Text>

                      <Flex
                        sx={{
                          gap: ".8rem",
                          alignItems: "center",
                        }}
                      >
                        <CoinIcon />
                        {getDisplayAmount(
                          currentRaffle.proceeds.ticketPrice,
                          currentRaffle.proceeds.mint
                        )}{" "}
                        ${currentRaffle.proceeds.mint.symbol} ea
                      </Flex>
                    </Flex>
                  </Flex>
                </a>
              </Link>
              {!ended && (
                <PurchaseTickets
                  raffle={currentRaffle}
                  updateRaffle={() =>
                    updateRaffleById(currentRaffle.publicKey.toString())
                  }
                />
              )}
            </>
          ) : (
            <LoadingIcon />
          )}
        </Flex>
      </main>

      <footer
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          margin: "4rem 0",
        }}
      >
        Powered by
        <a
          href="https://twitter.com/mentaworks"
          target="_blank"
          rel="noopener noreferrer"
          sx={{
            display: "flex",
            alignItems: "center",
            marginLeft: "0.2em",
          }}
        >
          <Text
            variant="small"
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            menta.works
          </Text>
        </a>
      </footer>
    </>
  )
}
